//
// Generated file, do not edit! Created by opp_msgtool 6.0 from gradys_simulations/protocols/messages/network/CentralizedQMessage.msg.
//

#ifndef __INET_CENTRALIZEDQMESSAGE_M_H
#define __INET_CENTRALIZEDQMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif


namespace inet {

class CentralizedQMessage;

}  // namespace inet

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk


namespace inet {

/**
 * Enum generated from <tt>gradys_simulations/protocols/messages/network/CentralizedQMessage.msg:21</tt> by opp_msgtool.
 * <pre>
 * enum NodeType
 * {
 *     AGENT = 1;
 *     PASSIVE = 2;
 *     ALL = 3;
 * }
 * </pre>
 */
enum NodeType {
    AGENT = 1,
    PASSIVE = 2,
    ALL = 3
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const NodeType& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, NodeType& e) { int n; b->unpack(n); e = static_cast<NodeType>(n); }

/**
 * Enum generated from <tt>gradys_simulations/protocols/messages/network/CentralizedQMessage.msg:27</tt> by opp_msgtool.
 * <pre>
 * enum MessageType
 * {
 *     SHARE = 1;
 *     ACK = 2;
 *     REQUEST = 3;
 * }
 * </pre>
 */
enum MessageType {
    SHARE = 1,
    ACK = 2,
    REQUEST = 3
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MessageType& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MessageType& e) { int n; b->unpack(n); e = static_cast<MessageType>(n); }

/**
 * Class generated from <tt>gradys_simulations/protocols/messages/network/CentralizedQMessage.msg:33</tt> by opp_msgtool.
 * <pre>
 * class CentralizedQMessage extends FieldsChunk
 * {
 *     chunkLength = B(15); // Fixed chunk length
 *     NodeType nodeType; // Type of the sender node
 *     MessageType messageType; // Type of message
 *     int nodeId; // Id of the sender node
 *     int targetId; // Id of the target node
 *     NodeType targetNodeType; // Type of the target node
 *     int packetLoad; // Number of packets sent in message
 *     double nodePosition; // Position of the node, irrelevant for sensor and ground nodes
 * }
 * </pre>
 */
class CentralizedQMessage : public ::inet::FieldsChunk
{
  protected:
    NodeType nodeType = static_cast<inet::NodeType>(-1);
    MessageType messageType = static_cast<inet::MessageType>(-1);
    int nodeId = 0;
    int targetId = 0;
    NodeType targetNodeType = static_cast<inet::NodeType>(-1);
    int packetLoad = 0;
    double nodePosition = 0;

  private:
    void copy(const CentralizedQMessage& other);

  protected:
    bool operator==(const CentralizedQMessage&) = delete;

  public:
    CentralizedQMessage();
    CentralizedQMessage(const CentralizedQMessage& other);
    virtual ~CentralizedQMessage();
    CentralizedQMessage& operator=(const CentralizedQMessage& other);
    virtual CentralizedQMessage *dup() const override {return new CentralizedQMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual NodeType getNodeType() const;
    virtual void setNodeType(NodeType nodeType);

    virtual MessageType getMessageType() const;
    virtual void setMessageType(MessageType messageType);

    virtual int getNodeId() const;
    virtual void setNodeId(int nodeId);

    virtual int getTargetId() const;
    virtual void setTargetId(int targetId);

    virtual NodeType getTargetNodeType() const;
    virtual void setTargetNodeType(NodeType targetNodeType);

    virtual int getPacketLoad() const;
    virtual void setPacketLoad(int packetLoad);

    virtual double getNodePosition() const;
    virtual void setNodePosition(double nodePosition);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const CentralizedQMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, CentralizedQMessage& obj) {obj.parsimUnpack(b);}


}  // namespace inet


namespace omnetpp {

template<> inline inet::CentralizedQMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::CentralizedQMessage*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET_CENTRALIZEDQMESSAGE_M_H

