//
// Generated file, do not edit! Created by opp_msgtool 6.0 from gradys_simulations/protocols/messages/network/QuadrantMessage.msg.
//

#ifndef __INET_QUADRANTMESSAGE_M_H
#define __INET_QUADRANTMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif


namespace inet {

class QuadrantMessage;

}  // namespace inet

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk


namespace inet {

/**
 * Enum generated from <tt>gradys_simulations/protocols/messages/network/QuadrantMessage.msg:24</tt> by opp_msgtool.
 * <pre>
 * enum SenderType
 * {
 *     DRONE = 0;
 *     SENSOR = 1;
 *     GROUND_STATION = 2;
 * }
 * </pre>
 */
enum SenderType {
    DRONE = 0,
    SENSOR = 1,
    GROUND_STATION = 2
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SenderType& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SenderType& e) { int n; b->unpack(n); e = static_cast<SenderType>(n); }

/**
 * Class generated from <tt>gradys_simulations/protocols/messages/network/QuadrantMessage.msg:31</tt> by opp_msgtool.
 * <pre>
 * class QuadrantMessage extends FieldsChunk
 * {
 *     chunkLength = B(7); // Fixed chunk length
 *     SenderType senderType;
 *     int content = 0;
 *     int sourceID = -1;
 *     int destinationID = -1;
 *     int nextWaypointID = -1;
 *     int lastWaypointID = -1;
 *     int dataLength = 5;
 *     int leftNeighbours = 0;
 *     int rightNeighbours = 0;
 *     bool reversed = false;
 *     string drones;
 *     string uuids;
 *     string coords_by_ox;
 * 
 * }
 * </pre>
 */
class QuadrantMessage : public ::inet::FieldsChunk
{
  protected:
    SenderType senderType = static_cast<inet::SenderType>(-1);
    int content = 0;
    int sourceID = -1;
    int destinationID = -1;
    int nextWaypointID = -1;
    int lastWaypointID = -1;
    int dataLength = 5;
    int leftNeighbours = 0;
    int rightNeighbours = 0;
    bool reversed = false;
    ::omnetpp::opp_string drones;
    ::omnetpp::opp_string uuids;
    ::omnetpp::opp_string coords_by_ox;

  private:
    void copy(const QuadrantMessage& other);

  protected:
    bool operator==(const QuadrantMessage&) = delete;

  public:
    QuadrantMessage();
    QuadrantMessage(const QuadrantMessage& other);
    virtual ~QuadrantMessage();
    QuadrantMessage& operator=(const QuadrantMessage& other);
    virtual QuadrantMessage *dup() const override {return new QuadrantMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual SenderType getSenderType() const;
    virtual void setSenderType(SenderType senderType);

    virtual int getContent() const;
    virtual void setContent(int content);

    virtual int getSourceID() const;
    virtual void setSourceID(int sourceID);

    virtual int getDestinationID() const;
    virtual void setDestinationID(int destinationID);

    virtual int getNextWaypointID() const;
    virtual void setNextWaypointID(int nextWaypointID);

    virtual int getLastWaypointID() const;
    virtual void setLastWaypointID(int lastWaypointID);

    virtual int getDataLength() const;
    virtual void setDataLength(int dataLength);

    virtual int getLeftNeighbours() const;
    virtual void setLeftNeighbours(int leftNeighbours);

    virtual int getRightNeighbours() const;
    virtual void setRightNeighbours(int rightNeighbours);

    virtual bool getReversed() const;
    virtual void setReversed(bool reversed);

    virtual const char * getDrones() const;
    virtual void setDrones(const char * drones);

    virtual const char * getUuids() const;
    virtual void setUuids(const char * uuids);

    virtual const char * getCoords_by_ox() const;
    virtual void setCoords_by_ox(const char * coords_by_ox);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const QuadrantMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, QuadrantMessage& obj) {obj.parsimUnpack(b);}


}  // namespace inet


namespace omnetpp {

template<> inline inet::QuadrantMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::QuadrantMessage*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET_QUADRANTMESSAGE_M_H

