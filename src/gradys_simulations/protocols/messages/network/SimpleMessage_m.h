//
// Generated file, do not edit! Created by opp_msgtool 6.0 from gradys_simulations/protocols/messages/network/SimpleMessage.msg.
//

#ifndef __INET_SIMPLEMESSAGE_M_H
#define __INET_SIMPLEMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif


namespace inet {

class SimpleMessage;

}  // namespace inet

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk


namespace inet {

/**
 * Enum generated from <tt>gradys_simulations/protocols/messages/network/SimpleMessage.msg:22</tt> by opp_msgtool.
 * <pre>
 * enum SenderType
 * {
 *     DRONE = 0;
 *     SENSOR = 1;
 *     GROUND_STATION = 2;
 * }
 * </pre>
 */
enum SenderType {
    DRONE = 0,
    SENSOR = 1,
    GROUND_STATION = 2
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SenderType& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SenderType& e) { int n; b->unpack(n); e = static_cast<SenderType>(n); }

/**
 * Class generated from <tt>gradys_simulations/protocols/messages/network/SimpleMessage.msg:29</tt> by opp_msgtool.
 * <pre>
 * class SimpleMessage extends FieldsChunk
 * {
 *     chunkLength = B(7); // Fixed chunk length
 *     SenderType senderType;
 *     int content;
 * }
 * </pre>
 */
class SimpleMessage : public ::inet::FieldsChunk
{
  protected:
    SenderType senderType = static_cast<inet::SenderType>(-1);
    int content = 0;

  private:
    void copy(const SimpleMessage& other);

  protected:
    bool operator==(const SimpleMessage&) = delete;

  public:
    SimpleMessage();
    SimpleMessage(const SimpleMessage& other);
    virtual ~SimpleMessage();
    SimpleMessage& operator=(const SimpleMessage& other);
    virtual SimpleMessage *dup() const override {return new SimpleMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual SenderType getSenderType() const;
    virtual void setSenderType(SenderType senderType);

    virtual int getContent() const;
    virtual void setContent(int content);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SimpleMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SimpleMessage& obj) {obj.parsimUnpack(b);}


}  // namespace inet


namespace omnetpp {

template<> inline inet::SimpleMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::SimpleMessage*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET_SIMPLEMESSAGE_M_H

