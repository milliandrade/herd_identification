//
// Generated file, do not edit! Created by opp_msgtool 6.0 from gradys_simulations/protocols/messages/network/PythonMessage.msg.
//

#ifndef __INET_PYTHONMESSAGE_M_H
#define __INET_PYTHONMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif


namespace inet {

class PythonMessage;

}  // namespace inet

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "gradys_simulations/protocols/messages/network/SimpleMessage_m.h" // import gradys_simulations.protocols.messages.network.SimpleMessage

// cplusplus {{
       #include<string>
       typedef std::string STRING;
// }}


namespace inet {

/**
 * Class generated from <tt>gradys_simulations/protocols/messages/network/PythonMessage.msg:32</tt> by opp_msgtool.
 * <pre>
 * class PythonMessage extends FieldsChunk
 * {
 *     chunkLength = B(7); // Fixed chunk length
 *     STRING information;
 * }
 * </pre>
 */
class PythonMessage : public ::inet::FieldsChunk
{
  protected:
    ::STRING information;

  private:
    void copy(const PythonMessage& other);

  protected:
    bool operator==(const PythonMessage&) = delete;

  public:
    PythonMessage();
    PythonMessage(const PythonMessage& other);
    virtual ~PythonMessage();
    PythonMessage& operator=(const PythonMessage& other);
    virtual PythonMessage *dup() const override {return new PythonMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const ::STRING& getInformation() const;
    virtual ::STRING& getInformationForUpdate() { handleChange();return const_cast<::STRING&>(const_cast<PythonMessage*>(this)->getInformation());}
    virtual void setInformation(const ::STRING& information);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const PythonMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, PythonMessage& obj) {obj.parsimUnpack(b);}


}  // namespace inet


namespace omnetpp {

inline any_ptr toAnyPtr(const STRING *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline STRING *fromAnyPtr(any_ptr ptr) { return ptr.get<STRING>(); }
template<> inline inet::PythonMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::PythonMessage*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET_PYTHONMESSAGE_M_H

