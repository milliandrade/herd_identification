[General]
description = "Setup visualisation, scene origin, sensors"

cmdenv-status-frequency = 10s
cmdenv-output-file = "${resultdir}/${runnumber}.out"

allow-object-stealing-on-deletion=true


## Visualizer settings
*.visualizer.osgVisualizer.typename = "IntegratedOsgVisualizer"
*.visualizer.osgVisualizer.sceneVisualizer.typename = "SceneOsgEarthVisualizer"
*.visualizer.osgVisualizer.sceneVisualizer.mapFile = "map.earth"

*.visualizer.*.sceneVisualizer.sceneImageSize = 100000m
*.visualizer.*.sceneVisualizer.sceneMinX = -1000m
*.visualizer.*.sceneVisualizer.sceneMinY = -1000m
*.visualizer.*.sceneVisualizer.sceneMinZ = -1000m
*.visualizer.*.sceneVisualizer.sceneMaxX = 1000m
*.visualizer.*.sceneVisualizer.sceneMaxY = 1000m
*.visualizer.*.sceneVisualizer.sceneMaxZ = 1000m

## Enables visualisation of links, network routes, network nodes
*.visualizer.*.physicalLinkVisualizer.lineShift = 0
##*.visualizer.*.physicalLinkVisualizer.displayLinks = true
*.visualizer.*.dataLinkVisualizer.lineShift = 0
##*.visualizer.*.dataLinkVisualizer.displayLinks = true
#*.visualizer.*.networkRouteVisualizer.displayRoutes = true
*.visualizer.*.networkRouteVisualizer.lineShift = 0
*.visualizer.*.networkNodeVisualizer.displayModuleName = true

## Enables visualization of drone load
*.visualizer.*.statisticVisualizer.signalName = "dataLoad"
*.visualizer.*.statisticVisualizer.format = "(%v)"
*.visualizer.*.statisticVisualizer.textColor = "red"
*.visualizer.*.statisticVisualizer.font = "Courier New, 12px, bold"
*.visualizer.*.statisticVisualizer.opacity = 1

## Enables visualization of mobility
*.visualizer.*.mobilityVisualizer.displayMobility = true
*.visualizer.*.mobilityVisualizer.displayPositions = true
*.visualizer.*.mobilityVisualizer.displayOrientations = true
*.visualizer.*.mobilityVisualizer.displayVelocities = true
*.visualizer.*.mobilityVisualizer.displayMovementTrails = true
*.visualizer.*.mobilityVisualizer.animationSpeed = 10

## Environment
*.environment.ground.typename = "FlatGround"
*.quads[*].osgModel = "3d/drone.ive.10.scale.0,0,90.rot"
**.mobility.initFromDisplayString = false

## Coordinates of the scene origin on the map
## BSB
#*.coordinateSystem.sceneLatitude = -15.84584deg
#*.coordinateSystem.sceneLongitude = -47.93052deg
#*.coordinateSystem.sceneHeading = 90deg # scene orientation

## PUC
#*.coordinateSystem.sceneLongitude = -43.22260deg
#*.coordinateSystem.sceneLatitude = -22.97556deg
#*.coordinateSystem.sceneHeading = 90deg # scene orientation

## Campo
#*.coordinateSystem.sceneLongitude = -47.926634deg
#*.coordinateSystem.sceneLatitude = -15.840075deg
#*.coordinateSystem.sceneHeading = 0deg # scene orientation

##FARM
*.coordinateSystem.sceneLongitude = -48.09779867095303deg
*.coordinateSystem.sceneLatitude = -15.630554093095277deg
*.coordinateSystem.sceneHeading = 0deg # scene orientation


## Mobility constraint area for quads, sensors and ground stations
## To specify for quads, sensors or ground stations seperately do the following
## *.{QUADS|SENSORS|GROUNDSTATIONS}[*].mobility.constraintAreaMinX = -10000m
*.*[*].mobility.constraintAreaMinX = -1000m
*.*[*].mobility.constraintAreaMinY = -1000m 
*.*[*].mobility.constraintAreaMinZ = -1000m
*.*[*].mobility.constraintAreaMaxX = 1000m
*.*[*].mobility.constraintAreaMaxY = 1000m
*.*[*].mobility.constraintAreaMaxZ = 1000m

## Display communication range / interference range from wifi for all quads, sensors and ground stations
## To specify for quads, sensors or ground stations seperately do the following
## *.{QUADS|SENSORS|GROUNDSTATIONS}[*].wlan[*].radio.displayCommunicationRange = true
*.*[*].wlan[*].radio.displayCommunicationRange = true
*.*[*].wlan[0].radio.displayInterferenceRange = false

## Set sensor settings 
*.sensor*.wlan[0].radio.energyConsumer.typename = "SensorStateBasedEpEnergyConsumer"
*.sensor*.wlan[0].radio.energyConsumer.offPowerConsumption = 0mW
*.sensor*.wlan[0].radio.energyConsumer.sleepPowerConsumption = 1mW
*.sensor*.wlan[0].radio.energyConsumer.switchingPowerConsumption = 1mW
*.sensor*.wlan[0].radio.energyConsumer.receiverIdlePowerConsumption = 2mW
*.sensor*.wlan[0].radio.energyConsumer.receiverBusyPowerConsumption = 5mW
*.sensor*.wlan[0].radio.energyConsumer.receiverReceivingPowerConsumption = 10mW
*.sensor*.wlan[0].radio.energyConsumer.transmitterIdlePowerConsumption = 2mW
*.sensor*.wlan[0].radio.energyConsumer.transmitterTransmittingPowerConsumption = 100mW
*.sensor*.energyStorage.typename = "IdealEpEnergyStorage"

#Farm
*.farm.app[0].typename = "UdpCommunicationApp"
*.farm.app[0].localPort = 1000
*.farm.app[0].destPort = 1000
*.farm.app[0].sendInterval = 1s
*.farm.app[0].startTime =1s
*.farm.app[0].stopTime = -1s
*.farm.app[0].messageLength = 1454Byte

*.farm.mobility.coordinateSystemModule = "coordinateSystem"
*.farm.mobility.initialAltitude = 0m

*.farm.mobility.initialLatitude = -15.630554deg
*.farm.mobility.initialLongitude = -48.097798deg



[Config Wifi]
network = GradysNetwork
description = "Configure quads, ground stations and sensors for wifi only communication"

## Quad setup:
*.quads[*].numApps = 1

# --- communication parameters -------
*.quads[*].app[0].typename = "UdpCommunicationApp"
*.quads[*].app[0].localPort = 1000
*.quads[*].app[0].destPort = 1000
*.quads[*].app[0].sendInterval = 1s
*.quads[*].app[0].startTime = 1s
*.quads[*].app[0].stopTime = -1s
*.quads[*].app[0].messageLength = 1454Byte

*.quads[*].protocol.typename = "QuadrantDroneProtocol"

# --- mobility parameters -------
*.quads[*].mobility.typename = "DroneMobility"
*.quads[*].mobility.coordinateSystemModule = "coordinateSystem" 
*.quads[*].mobility.waypointProximity = 1m
*.quads[*].mobility.speed = 10mps
*.quads[*].mobility.homeLongitude = -48.097798deg
*.quads[*].mobility.homeLatitude = -15.630554deg
*.quads[*].mobility.waypointFile = "paths/farm-100ha-fence.waypoints"

## Ground station setup
*.groundStation.numApps = 1

# --- communication parameters -------
*.groundStation.app[0].typename = "UdpCommunicationApp"
*.groundStation.app[0].destPort = 1000
*.groundStation.app[0].localPort = 1000
*.groundStation.app[0].sendInterval = 1s
*.groundStation.app[0].messageLength = 1454Byte
*.groundStation.app[0].startTime = 1s

*.groundStation.protocol.typename = "QuadrantGroundProtocol"

# --- mobility parameters -------
*.groundStation.mobility.typename = "StationaryMobility"
*.groundStation.mobility.coordinateSystemModule = "coordinateSystem"
*.groundStation.mobility.initialAltitude = 0m

*.groundStation.mobility.initialLatitude = -15.630554deg
*.groundStation.mobility.initialLongitude = -48.097798deg


## Sensor setup
*.numSensors = 8

*.sensors[*].numApps = 1

# --- communication parameters -------
*.sensors[*].app[0].typename = "UdpCommunicationApp"
*.sensors[*].app[0].destPort = 1000
*.sensors[*].app[0].localPort = 1000
*.sensors[*].app[0].sendInterval = 2s
*.sensors[*].app[0].startTime = exponential(1s)
*.sensors[*].app[0].messageLength = 1454Byte
*.sensors[0..2].protocol.typename = "QuadrantSensorProtocol"

# --- mobility parameters -------
#*.sensors[*].mobility.typename = "RandomWaypointMobility"  
#*.sensors[*].mobility.coordinateSystemModule = "coordinateSystem"
#*.sensors[*].quads[*].mobility.speed = 1mps
#*.sensors[*].mobility.initialAltitude = 0m
#*.sensors[*].mobility.constraintAreaMinZ = 0m
#*.sensors[*].mobility.constraintAreaMaxZ = 0m
#*.sensors[*].mobility.constraintAreaMinX = 100m
#*.sensors[*].mobility.constraintAreaMinY = 100m

*.sensors[*].mobility.typename = "LinearMobility"
*.sensors[*].mobility.coordinateSystemModule = "coordinateSystem"
*.sensors[*].mobility.constraintAreaMinX = 10m
*.sensors[*].mobility.constraintAreaMinY = 10m
*.sensors[*].mobility.constraintAreaMinZ = 0m
*.sensors[*].mobility.constraintAreaMaxX = 150m
*.sensors[*].mobility.constraintAreaMaxY = 150m
*.sensors[*].mobility.constraintAreaMaxZ = 0m
*.sensors[*].mobility.speed = 5mps
*.sensors[*].mobility.initialMovementHeading = 10deg


#Farm with 100ha
#*.sensors[*].mobility.constraintAreaMaxX = 1100m		
#*.sensors[*].mobility.constraintAreaMaxY = 1100m


#Farm with 225ha
#*.sensors[*].mobility.constraintAreaMaxX = 1600m		
#*.sensors[*].mobility.constraintAreaMaxY = 1600m

#Farm with 400ha
#*.sensors[*].mobility.constraintAreaMaxX = 2100m		
#*.sensors[*].mobility.constraintAreaMaxY = 2100m



[Config Wifi-Farm-100-4U-8O]
extends=Wifi
description="Simulation with four drones with wifi radio only in a 100ha farm with 8 oxen"

*.numUAVs = 4
*.numSensors = 8

*.quads[*].protocol.typename = "QuadrantDroneProtocol"
*.quads[*].protocol.timeoutDuration = 5s

*.quads[0].app[*].startTime = normal(1s, 1s)
*.quads[1].app[*].startTime = normal(10s, 1s)
*.quads[2].app[*].startTime = normal(20s, 1s)
*.quads[3].app[*].startTime = normal(30s, 1s)
*.quads[0].app[0].destAddresses = "quads[1] quads[2] quads[3] sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] sensors[6] sensors[7] groundStation"
*.quads[1].app[0].destAddresses = "quads[0] quads[2] quads[3] sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] sensors[6] sensors[7] groundStation"
*.quads[2].app[0].destAddresses = "quads[0] quads[1] quads[3] sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] sensors[6] sensors[7] groundStation"
*.quads[3].app[0].destAddresses = "quads[1] quads[2] quads[0] sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] sensors[6] sensors[7] groundStation"


*.quads[0].mobility.startTime = 2s
*.quads[1].mobility.startTime = 4s
*.quads[2].mobility.startTime = 6s
*.quads[3].mobility.startTime = 0s

*.quads[0].mobility.waypointFile = "paths/farm-100ha-drone-A.waypoints"
*.quads[1].mobility.waypointFile = "paths/farm-100ha-drone-B.waypoints"
*.quads[2].mobility.waypointFile = "paths/farm-100ha-drone-C.waypoints"
*.quads[3].mobility.waypointFile = "paths/farm-100ha-fence.waypoints"

*.quads[*].numFailures = 0

*.sensors[0..7].protocol.typename = "QuadrantSensorProtocol"
*.sensors[*].app[0].destAddresses = "quads[0] quads[1] quads[2] quads[3]"

*.groundStation.protocol.typename = "QuadrantGroundProtocol"
*.groundStation.app[0].destAddresses = "quads[0] quads[1] quads[2] quads[3]"

#[Config Wifi-Dadca-4-Drones]
#extends=Wifi
#description="Simulation with four drones with wifi radio only" 
#
#*.numUAVs = 4
#
#*.quads[*].protocol.typename = "DadcaProtocol"
#*.quads[*].protocol.timeoutDuration = 20s
#
#*.quads[0].app[*].startTime = normal(1s, 1s)
#*.quads[1].app[*].startTime = normal(40s, 1s)
#*.quads[2].app[*].startTime = normal(80s, 1s)
#*.quads[3].app[*].startTime = normal(110s, 1s)
#*.quads[0].app[0].destAddresses = "quads[1] quads[2] quads[3] sensors[0] sensors[1] sensors[2] groundStation"
#*.quads[1].app[0].destAddresses = "quads[0] quads[2] quads[3] sensors[0] sensors[1] sensors[2] groundStation"
#*.quads[2].app[0].destAddresses = "quads[0] quads[1] quads[3] sensors[0] sensors[1] sensors[2] groundStation"
#*.quads[3].app[0].destAddresses = "quads[0] quads[1] quads[2] sensors[0] sensors[1] sensors[2] groundStation"
#
#*.quads[0].mobility.startTime = 0s
#*.quads[1].mobility.startTime = 40s
#*.quads[2].mobility.startTime = 80s
#*.quads[3].mobility.startTime = 110s
#*.quads[*].mobility.waypointFile = "paths/voo_ar.waypoints"
#
#*.quads[0].numFailures = 0
#
#*.sensors[0..3].protocol.typename = "DadcaProtocolSensor"
#*.sensors[*].app[0].destAddresses = "quads[0] quads[1] quads[2] quads[3]"
#
#*.groundStation.protocol.typename = "DadcaProtocolGround"
#*.groundStation.app[0].destAddresses = "quads[0] quads[1] quads[2] quads[3]"


#[Config Sim1drone-MAM]
#extends=MAM
#description="Simulation with one drone with wifi and MAM radios"
#*.numUAVs = 1
#*.quads[0].app[0].destAddresses = "sensors[0] groundStation"
#*.quads[*].app[*].timeoutDuration = 10s
#*.quads[0].mobility.startTime = 0s
#*.quads[0].app[*].startTime = normal(1s, 1s)
#*.quads[0].numFailures = 2
#*.quads[0].failures[0].typename="SimpleConsumptionEnergy"
#*.quads[0].failures[0].batteryCapacity = 500mAh
#*.quads[0].failures[0].batteryRTLThreshold = 450mAh
#*.quads[0].failures[0].batteryConsumption = 1.5A
#*.quads[0].failures[1].typename="RandomFailureGenerator"
#*.quads[0].failures[1].failureChance = 0.2
#
#*.groundStation.app[0].destAddresses = "quads[0]"


## Additional settings
#*.quads[*].failures[0].typename = "RandomFailureGenerator"
#*.quads[*].failures[0].failureStart = 5s
#*.quads[*].failures[0].failureMinimumInterval = 10s
#*.quads[*].failures[0].failureRollTime = 1s
#*.quads[*].failures[0].failureChance = 0.001
#*.quads[*].failures[0].failureDuration = 20s
