[General]
description = "Setup visualisation, scene origin, sensors"

cmdenv-status-frequency = 10s
cmdenv-output-file = "${resultdir}/${runnumber}.out"

allow-object-stealing-on-deletion=true

## Visualizer settings
*.visualizer.osgVisualizer.typename = "IntegratedOsgVisualizer"
*.visualizer.osgVisualizer.sceneVisualizer.typename = "SceneOsgEarthVisualizer"
*.visualizer.osgVisualizer.sceneVisualizer.mapFile = "map.earth"

*.visualizer.*.sceneVisualizer.sceneImageSize = 10000m
*.visualizer.*.sceneVisualizer.sceneMinX = -10000m
*.visualizer.*.sceneVisualizer.sceneMinY = -10000m
*.visualizer.*.sceneVisualizer.sceneMinZ = -10000m
*.visualizer.*.sceneVisualizer.sceneMaxX = 10000m
*.visualizer.*.sceneVisualizer.sceneMaxY = 10000m
*.visualizer.*.sceneVisualizer.sceneMaxZ = 10000m

## Enables visualisation of links, network routes, network nodes
*.visualizer.*.physicalLinkVisualizer.lineShift = 0
##*.visualizer.*.physicalLinkVisualizer.displayLinks = true
*.visualizer.*.dataLinkVisualizer.lineShift = 0
##*.visualizer.*.dataLinkVisualizer.displayLinks = true
#*.visualizer.*.networkRouteVisualizer.displayRoutes = true
*.visualizer.*.networkRouteVisualizer.lineShift = 0
*.visualizer.*.networkNodeVisualizer.displayModuleName = true

## Enables visualization of drone load
*.visualizer.*.statisticVisualizer.signalName = "dataLoad"
*.visualizer.*.statisticVisualizer.format = "(%v)"
*.visualizer.*.statisticVisualizer.textColor = "red"
*.visualizer.*.statisticVisualizer.font = "Courier New, 12px, bold"
*.visualizer.*.statisticVisualizer.opacity = 1

## Enables visualization of mobility
*.visualizer.*.mobilityVisualizer.displayMobility = true
*.visualizer.*.mobilityVisualizer.displayPositions = true
*.visualizer.*.mobilityVisualizer.displayOrientations = true
*.visualizer.*.mobilityVisualizer.displayVelocities = true
*.visualizer.*.mobilityVisualizer.displayMovementTrails = true
*.visualizer.*.mobilityVisualizer.animationSpeed = 10

## Environment
*.environment.ground.typename = "FlatGround"
*.quads[*].osgModel = "3d/drone.ive.10.scale.0,0,90.rot"
**.mobility.initFromDisplayString = false

## Coordinates of the scene origin on the map
## BSB
#*.coordinateSystem.sceneLatitude = -15.84584deg
#*.coordinateSystem.sceneLongitude = -47.93052deg
#*.coordinateSystem.sceneHeading = 90deg # scene orientation

## PUC
#*.coordinateSystem.sceneLongitude = -43.22260deg
#*.coordinateSystem.sceneLatitude = -22.97556deg
#*.coordinateSystem.sceneHeading = 90deg # scene orientation

## Campo
#*.coordinateSystem.sceneLongitude = -47.926634deg
#*.coordinateSystem.sceneLatitude = -15.840075deg
#*.coordinateSystem.sceneHeading = 0deg # scene orientation

##FARM
*.coordinateSystem.sceneLongitude = -48.09779867095303deg
*.coordinateSystem.sceneLatitude = -15.630554093095277deg
*.coordinateSystem.sceneHeading = 0deg # scene orientation


## Mobility constraint area for quads, sensors and ground stations
## To specify for quads, sensors or ground stations seperately do the following
## *.{QUADS|SENSORS|GROUNDSTATIONS}[*].mobility.constraintAreaMinX = -10000m
*.*[*].mobility.constraintAreaMinX = -10000m
*.*[*].mobility.constraintAreaMinY = -10000m 
*.*[*].mobility.constraintAreaMinZ = -10000m
*.*[*].mobility.constraintAreaMaxX = 10000m
*.*[*].mobility.constraintAreaMaxY = 10000m
*.*[*].mobility.constraintAreaMaxZ = 10000m


## Display communication range / interference range from wifi for all quads, sensors and ground stations
## To specify for quads, sensors or ground stations seperately do the following
## *.{QUADS|SENSORS|GROUNDSTATIONS}[*].wlan[*].radio.displayCommunicationRange = true
*.*[*].wlan[*].radio.displayCommunicationRange = true
*.*[*].wlan[0].radio.displayInterferenceRange = false

## Set sensor settings 
*.sensor*.wlan[0].radio.energyConsumer.typename = "SensorStateBasedEpEnergyConsumer"
*.sensor*.wlan[0].radio.energyConsumer.offPowerConsumption = 0mW
*.sensor*.wlan[0].radio.energyConsumer.sleepPowerConsumption = 1mW
*.sensor*.wlan[0].radio.energyConsumer.switchingPowerConsumption = 1mW
*.sensor*.wlan[0].radio.energyConsumer.receiverIdlePowerConsumption = 2mW
*.sensor*.wlan[0].radio.energyConsumer.receiverBusyPowerConsumption = 5mW
*.sensor*.wlan[0].radio.energyConsumer.receiverReceivingPowerConsumption = 10mW
*.sensor*.wlan[0].radio.energyConsumer.transmitterIdlePowerConsumption = 2mW
*.sensor*.wlan[0].radio.energyConsumer.transmitterTransmittingPowerConsumption = 100mW
*.sensor*.energyStorage.typename = "IdealEpEnergyStorage"

#Farm
*.farm.app[0].typename = "UdpCommunicationApp"
*.farm.app[0].localPort = 1000
*.farm.app[0].destPort = 1000
*.farm.app[0].sendInterval = 1s
*.farm.app[0].startTime =1s
*.farm.app[0].stopTime = -1s
*.farm.app[0].messageLength = 1454Byte

*.farm.mobility.coordinateSystemModule = "coordinateSystem"
*.farm.mobility.initialAltitude = 0m

*.farm.mobility.initialLatitude = -15.630554deg
*.farm.mobility.initialLongitude = -48.097798deg


[Config Wifi]
network = GradysNetwork
description = "Configure quads, ground stations and sensors for wifi only communication"

## Quad setup:
*.quads[*].numApps = 1

*.quads[*].app[0].typename = "UdpCommunicationApp"
*.quads[*].app[0].localPort = 1000
*.quads[*].app[0].destPort = 1000
*.quads[*].app[0].sendInterval = 1s
*.quads[*].app[0].startTime = 1s
*.quads[*].app[0].stopTime = -1s
*.quads[*].app[0].messageLength = 1454Byte

#*.quads[*].protocol.typename = "SimpleDroneProtocol"
*.quads[*].protocol.typename = "HICADroneProtocol"

*.quads[*].mobility.typename = "DroneMobility"
*.quads[*].mobility.coordinateSystemModule = "coordinateSystem" 
*.quads[*].mobility.waypointProximity = 1m
*.quads[*].mobility.speed = 10mps
#*.quads[*].mobility.homeLatitude = -15.840068deg
#*.quads[*].mobility.homeLongitude = -47.926633deg
*.quads[*].mobility.homeLongitude = -48.097798deg
*.quads[*].mobility.homeLatitude = -15.630554deg
*.quads[*].mobility.waypointFile = "paths/farm-100ha-fence.waypoints"


## Ground station setup
*.groundStation.numApps = 1

*.groundStation.app[0].typename = "UdpCommunicationApp"
*.groundStation.app[0].destPort = 1000
*.groundStation.app[0].localPort = 1000
*.groundStation.app[0].sendInterval = 1s
*.groundStation.app[0].messageLength = 1454Byte
*.groundStation.app[0].startTime = 1s

#*.groundStation.protocol.typename = "SimpleGroundProtocol"
*.groundStation.protocol.typename = "HICAGroundProtocol"

*.groundStation.mobility.typename = "StationaryMobility"
*.groundStation.mobility.coordinateSystemModule = "coordinateSystem"
*.groundStation.mobility.initialAltitude = 0m

#*.groundStation.mobility.initialLatitude = -15.840068deg
#*.groundStation.mobility.initialLongitude = -47.926633deg
*.groundStation.mobility.initialLatitude = -15.630554deg
*.groundStation.mobility.initialLongitude = -48.097798deg

## Sensor setup
*.numSensors = 8

*.sensors[*].numApps = 1

*.sensors[*].app[0].typename = "UdpCommunicationApp"
*.sensors[*].app[0].destPort = 1000
*.sensors[*].app[0].localPort = 1000
*.sensors[*].app[0].sendInterval = 8s
*.sensors[*].app[0].startTime = exponential(1s)
*.sensors[*].app[0].messageLength = 1454Byte

*.sensors[0..7].protocol.typename = "HICASensorProtocol"


*.sensors[*].mobility.typename = "LinearMobility"
*.sensors[*].mobility.coordinateSystemModule = "coordinateSystem"
*.sensors[*].mobility.constraintAreaMinX = 100m
*.sensors[*].mobility.constraintAreaMinY = 100m
*.sensors[*].mobility.constraintAreaMinZ = 0m
*.sensors[*].mobility.constraintAreaMaxZ = 0m
*.sensors[*].mobility.speed = 5mps
*.sensors[*].mobility.initialMovementHeading = 10deg

#�rea de 100 hectares
#*.sensors[*].mobility.constraintAreaMaxX = 1100m		
#*.sensors[*].mobility.constraintAreaMaxY = 1100m

#�rea de 225 hectares
#*.sensors[*].mobility.constraintAreaMaxX = 1600m		
#*.sensors[*].mobility.constraintAreaMaxY = 1600m

#�rea de 400 hectares
#*.sensors[*].mobility.constraintAreaMaxX = 2100m		
#*.sensors[*].mobility.constraintAreaMaxY = 2100m




[Config Wifi-Dadca-3-Drones]
extends=Wifi
description="Simulation with three drones with wifi radio only"

*.numUAVs = 3

#*.quads[*].protocol.typename = "DadcaProtocol"
*.quads[*].protocol.typename = "HICADroneProtocol"
*.quads[*].protocol.timeoutDuration = 20s

*.quads[0].app[*].startTime = normal(1s, 1s)
*.quads[1].app[*].startTime = normal(40s, 1s)
*.quads[2].app[*].startTime = normal(80s, 1s)
*.quads[0].app[0].destAddresses = "quads[1] quads[2] sensors[0] sensors[1] sensors[2] groundStation"
*.quads[1].app[0].destAddresses = "quads[0] quads[2] sensors[0] sensors[1] sensors[2] groundStation"
*.quads[2].app[0].destAddresses = "quads[0] quads[1] sensors[0] sensors[1] sensors[2] groundStation"

*.quads[0].mobility.startTime = 0s
*.quads[1].mobility.startTime = 40s
*.quads[2].mobility.startTime = 80s
*.quads[*].mobility.waypointFile = "paths/voo_ar.waypoints"

*.quads[0].numFailures = 0

#*.sensors[0..2].protocol.typename = "DadcaProtocolSensor"
*.sensors[0..2].protocol.typename = "HICASensorProtocol"
*.sensors[*].app[0].destAddresses = "quads[0] quads[1] quads[2]"

#*.groundStation.protocol.typename = "DadcaProtocolGround"
*.groundStation.protocol.typename = "HICAGroundProtocol"
*.groundStation.app[0].destAddresses = "quads[0] quads[1] quads[2]"

[Config Wifi-100ha-4Drones-8oxen]
extends=Wifi
description="Simulation with 4 drones and 8 oxen with wifi radio only" 

*.numUAVs = 4
*.numSensors = 8

*.quads[*].protocol.typename = "HICADroneProtocol"
*.quads[*].protocol.timeoutDuration = 5s

*.quads[0].app[*].startTime = normal(2s, 1s)
*.quads[1].app[*].startTime = normal(4s, 1s)
*.quads[2].app[*].startTime = normal(6s, 1s)
*.quads[3].app[*].startTime = normal(0s, 1s)
*.quads[0].app[0].destAddresses = "quads[1] quads[2] quads[3] sensors[0] sensors[1] sensors[2]  sensors[3] sensors[4] sensors[5]  sensors[6] sensors[7] groundStation"
*.quads[1].app[0].destAddresses = "quads[0] quads[2] quads[3] sensors[0] sensors[1] sensors[2]  sensors[3] sensors[4] sensors[5]  sensors[6] sensors[7] groundStation"
*.quads[2].app[0].destAddresses = "quads[0] quads[1] quads[3] sensors[0] sensors[1] sensors[2]  sensors[3] sensors[4] sensors[5]  sensors[6] sensors[7] groundStation"
*.quads[3].app[0].destAddresses = "quads[0] quads[1] quads[2] sensors[0] sensors[1] sensors[2]  sensors[3] sensors[4] sensors[5]  sensors[6] sensors[7] groundStation"

*.quads[0].mobility.startTime = 2s
*.quads[1].mobility.startTime = 4s
*.quads[2].mobility.startTime = 6s
*.quads[3].mobility.startTime = 0s
*.quads[3].mobility.waypointFile = "paths/voo_ar4.waypoints"
*.quads[2].mobility.waypointFile = "paths/voo_ar3.waypoints"
*.quads[1].mobility.waypointFile = "paths/voo_ar2.waypoints"
*.quads[0].mobility.waypointFile = "paths/voo_ar.waypoints"

*.quads[0].numFailures = 0

#*.sensors[0..3].protocol.typename = "DadcaProtocolSensor"
*.sensors[0..7].protocol.typename = "HICASensorProtocol"
*.sensors[*].app[0].destAddresses = "quads[0] quads[1] quads[2] quads[3]"

*.sensors[0..1].mobility.typename = "LinearMobility"
*.sensors[0..1].mobility.coordinateSystemModule = "coordinateSystem"
*.sensors[0..1].mobility.constraintAreaMinX = 0m
*.sensors[0..1].mobility.constraintAreaMinY = 0m
*.sensors[0..1].mobility.constraintAreaMinZ = 0m
*.sensors[0..1].mobility.constraintAreaMaxX = 100m
*.sensors[0..1].mobility.constraintAreaMaxY = 100m
*.sensors[0..1].mobility.constraintAreaMaxZ = 0m
*.sensors[0..1].mobility.speed = 5mps
*.sensors[0..1].mobility.initialMovementHeading = 10deg

*.sensors[2..7].mobility.typename = "AttachedMobility"
*.sensors[2..4].mobility.mobilityModule = "^.^.sensors[0].mobility"
*.sensors[5..7].mobility.mobilityModule = "^.^.sensors[1].mobility"
*.sensors[2..4].mobility.offsetX = 5m
*.sensors[5..6].mobility.offsetY = 15m
*.sensors[7].mobility.offsetX = -15m
*.sensors[2..7].mobility.offsetHeading = 60deg

#*.groundStation.protocol.typename = "DadcaProtocolGround"
*.groundStation.protocol.typename = "HICAGroundProtocol"
*.groundStation.app[0].destAddresses = "quads[0] quads[1] quads[2] quads[3]"


[Config Wifi-100ha-4Drones-16oxen]
extends=Wifi
description="Simulation with 4 drones and 16 oxen with wifi radio only" 
# UAV Configurations
# This parameter is declared in the mobilityDrones.ned network and defines the number of UAVs
# in the simulation.
*.numUAVs = 4
*.numSensors = 16

# Apps are user implemented modules that extend the behaviour of INET communication modules.
# In this case our app will be the communication part of our three part solution.
*.quads[*].numApps = 1

# The communbication module automatically filters messages from nodes that are not included in the
# destAddresses parameter. Be careful not to set the node as a destination address to itself.
*.quads[0].app[0].destAddresses = "quads[1] quads[2] quads[3] sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] sensors[6] sensors[7] sensors[8] sensors[9] sensors[10] sensors[11] sensors[12] sensors[13] sensors[14] sensors[15] groundStation"
*.quads[1].app[0].destAddresses = "quads[0] quads[2] quads[3] sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] sensors[6] sensors[7] sensors[8] sensors[9] sensors[10] sensors[11] sensors[12] sensors[13] sensors[14] sensors[15] groundStation"
*.quads[2].app[0].destAddresses = "quads[0] quads[1] quads[3] sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] sensors[6] sensors[7] sensors[8] sensors[9] sensors[10] sensors[11] sensors[12] sensors[13] sensors[14] sensors[15] groundStation"
*.quads[3].app[0].destAddresses = "quads[1] quads[2] quads[0] sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] sensors[6] sensors[7] sensors[8] sensors[9] sensors[10] sensors[11] sensors[12] sensors[13] sensors[14] sensors[15] groundStation"


*.quads[*].protocol.timeoutDuration = 20s
*.quads[0].mobility.startTime = 2s
*.quads[1].mobility.startTime = 4s
*.quads[2].mobility.startTime = 6s
*.quads[3].mobility.startTime = 0s


# The waypointFile parameter is declared in DroneMobility.ned and specifies the waypoint list
# the drones will follow.
#*.quads[0].mobility.waypointFile = "paths/voo_fence2.waypoints"
#100 ha
*.quads[0].mobility.waypointFile = "paths/farm_100ha_droneA.waypoints"
*.quads[1].mobility.waypointFile = "paths/farm_100ha_droneB.waypoints"
*.quads[2].mobility.waypointFile = "paths/farm_100ha_droneC.waypoints"
*.quads[3].mobility.waypointFile = "paths/farm-100ha-fence.waypoints"
#400ha
#*.quads[0].mobility.waypointFile = "paths/voo_farm_drones2.waypoints"
#*.quads[1].mobility.waypointFile = "paths/voo_farm_drones3.waypoints"
#*.quads[2].mobility.waypointFile = "paths/voo_farm_drones4.waypoints"
#*.quads[3].mobility.waypointFile = "paths/voo_fence4.waypoints"
#225ha
#*.quads[0].mobility.waypointFile = "paths/voo_farm_drones-200-01.waypoints"
#*.quads[1].mobility.waypointFile = "paths/voo_farm_drones-200-02.waypoints"
#*.quads[2].mobility.waypointFile = "paths/voo_farm_drones-200-03.waypoints"
#*.quads[3].mobility.waypointFile = "paths/voo_fence-200.waypoints"




# The typename parameter of the protocol specifies the filename of the protocol implementation
# the protocol module will use.
*.quads[*].protocol.typename = "HICADroneProtocol"


# The normal() function gives us a value within 1s of 1s. This is used instead of a fixed value
# because if both the quads communication apps started at 1s and had the same interval between
# messages (defined by the .sendInterval parameter) they would be forever syncronized and their
# messages would always interfere with each other in the medium.
*.quads[0].app[*].startTime = normal(1s, 1s)
*.quads[1].app[*].startTime = normal(4s, 1s)
*.quads[2].app[*].startTime = normal(6s, 1s)
*.quads[3].app[*].startTime = normal(2s, 1s)

# Sensor configurations
*.sensors[*].app[*].destAddresses = "quads[0] quads[1] quads[2] quads[3]"
#*.sensors[*].app[*].destAddresses = "quads[0] quads[1]"
*.sensors[*].protocol.typename = "HICASensorProtocol"
*.sensors[0..2].mobility.typename = "LinearMobility"
*.sensors[0..2].mobility.coordinateSystemModule = "coordinateSystem"
*.sensors[0..2].mobility.constraintAreaMinX = 0m
*.sensors[0..2].mobility.constraintAreaMinY = 0m
*.sensors[0..2].mobility.constraintAreaMinZ = 0m
*.sensors[0..2].mobility.constraintAreaMaxX = 100m
*.sensors[0..2].mobility.constraintAreaMaxY = 100m
*.sensors[0..2].mobility.constraintAreaMaxZ = 0m
*.sensors[0..2].mobility.speed = 5mps
*.sensors[0..2].mobility.initialMovementHeading = 10deg

*.sensors[3..15].mobility.typename = "AttachedMobility"
*.sensors[3..8].mobility.mobilityModule = "^.^.sensors[0].mobility"
*.sensors[9..11].mobility.mobilityModule = "^.^.sensors[1].mobility"
*.sensors[12..15].mobility.mobilityModule = "^.^.sensors[2].mobility"
*.sensors[3..4].mobility.offsetX = 5m
*.sensors[5..6].mobility.offsetY = 15m
*.sensors[7..10].mobility.offsetX = -15m
*.sensors[11..13].mobility.offsetY = -15m
*.sensors[13..15].mobility.offsetX = -3m

*.sensors[2..7].mobility.offsetHeading = 25deg


# Groundstation configurations
# Setting the ground station as a sensor because it is a passive listener in this config
#*.groundStation.app[0].typename = "UdpSensorCommunicationApp"
*.groundStation.app[0].typename = "UdpMobileNodeCommunicationApp"
*.groundStation.app[*].destAddresses = "quads[0] quads[1] quads[2] quads[3]"
#*.groundStation.app[*].destAddresses = "quads[0] quads[1]"
*.groundStation.protocol.typename = "HICAGroundProtocol"
*.groundStation.app[0].startTime = 0s



[Config Wifi-Farm-100ha-4UAV-8Oox]
extends=Wifi
description="Simulation with four drones and 80oxen  with wifi radio only" 

*.numUAVs = 4
*.numSensors = 80

*.sensors[0].mobility.typename = "LinearMobility"
*.sensors[0].mobility.coordinateSystemModule = "coordinateSystem"
*.sensors[0].mobility.constraintAreaMinX = 1000m
*.sensors[0].mobility.constraintAreaMinY = 1000m
*.sensors[0].mobility.constraintAreaMinZ = 0m
*.sensors[0].mobility.constraintAreaMaxX = 2500m
*.sensors[0].mobility.constraintAreaMaxY = 2500m
*.sensors[0].mobility.constraintAreaMaxZ = 0m
*.sensors[0].mobility.speed = 5mps
*.sensors[0].mobility.initialMovementHeading = 10deg

*.sensors[1..9].mobility.typename = "AttachedMobility"
*.sensors[1..9].mobility.mobilityModule = "^.^.sensors[0].mobility"
*.sensors[1..3].mobility.offsetX = 5m
*.sensors[4..6].mobility.offsetY = 15m
*.sensors[7..9].mobility.offsetX = -15m
*.sensors[1..9].mobility.offsetHeading = 45deg


*.sensors[10].mobility.typename = "LinearMobility"
*.sensors[10].mobility.coordinateSystemModule = "coordinateSystem"
*.sensors[10].mobility.constraintAreaMinX = 1000m
*.sensors[10].mobility.constraintAreaMinY = 1000m
*.sensors[10].mobility.constraintAreaMinZ = 0m
*.sensors[10].mobility.constraintAreaMaxX = 2500m
*.sensors[10].mobility.constraintAreaMaxY = 2500m
*.sensors[10].mobility.constraintAreaMaxZ = 0m
*.sensors[10].mobility.speed = 5mps
*.sensors[10].mobility.initialMovementHeading = 15deg
*.sensors[11..29].mobility.typename = "AttachedMobility"
*.sensors[11..29].mobility.mobilityModule = "^.^.sensors[10].mobility"
*.sensors[11..13].mobility.offsetX = 12m
*.sensors[14..26].mobility.offsetY = 2m
*.sensors[27..29].mobility.offsetX = -22m
*.sensors[11..29].mobility.offsetHeading = 60deg


*.sensors[30].mobility.typename = "LinearMobility"
*.sensors[30].mobility.coordinateSystemModule = "coordinateSystem"
*.sensors[30].mobility.constraintAreaMinX = 1000m
*.sensors[30].mobility.constraintAreaMinY = 1000m
*.sensors[30].mobility.constraintAreaMinZ = 0m
*.sensors[30].mobility.constraintAreaMaxX = 1500m
*.sensors[30].mobility.constraintAreaMaxY = 1500m
*.sensors[30].mobility.constraintAreaMaxZ = 0m
*.sensors[30].mobility.speed = 5mps
*.sensors[30].mobility.initialMovementHeading = 10deg
*.sensors[31..59].mobility.typename = "AttachedMobility"
*.sensors[31..59].mobility.mobilityModule = "^.^.sensors[30].mobility"
*.sensors[31..40].mobility.offsetX = 20m
*.sensors[41..45].mobility.offsetY = -2m
*.sensors[46..50].mobility.offsetY = 20m
*.sensors[51..59].mobility.offsetX = -20m
*.sensors[51..59].mobility.offsetHeading = 25deg


*.sensors[60].mobility.typename = "LinearMobility"
*.sensors[60].mobility.coordinateSystemModule = "coordinateSystem"
*.sensors[60].mobility.constraintAreaMinX = 1000m
*.sensors[60].mobility.constraintAreaMinY = 1000m
*.sensors[60].mobility.constraintAreaMinZ = 0m
*.sensors[60].mobility.constraintAreaMaxX = 2500m
*.sensors[60].mobility.constraintAreaMaxY = 2500m
*.sensors[60].mobility.constraintAreaMaxZ = 0m
*.sensors[60].mobility.speed = 5mps
*.sensors[60].mobility.initialMovementHeading = 10deg
*.sensors[61..79].mobility.typename = "AttachedMobility"
*.sensors[61..79].mobility.mobilityModule = "^.^.sensors[10].mobility"
*.sensors[61..67].mobility.offsetX = 20m
*.sensors[68..71].mobility.offsetY = -10m
*.sensors[72..75].mobility.offsetY = 15m
*.sensors[76..79].mobility.offsetX = -15m
*.sensors[76..79].mobility.offsetHeading = 30deg







#*.quads[*].protocol.typename = "DadcaProtocol"
*.quads[*].protocol.typename = "HICADroneProtocol"
*.quads[*].protocol.timeoutDuration = 20s

*.quads[0].app[*].startTime = normal(1s, 1s)
*.quads[1].app[*].startTime = normal(5s, 1s)
*.quads[2].app[*].startTime = normal(10s, 1s)
*.quads[3].app[*].startTime = normal(15s, 1s)
*.quads[0].app[0].destAddresses = "quads[1] quads[2] quads[3] sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] sensors[6] sensors[7] groundStation"
*.quads[1].app[0].destAddresses = "quads[0] quads[2] quads[3] sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] sensors[6] sensors[7] groundStation"
*.quads[2].app[0].destAddresses = "quads[0] quads[1] quads[3] sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] sensors[6] sensors[7] groundStation"
*.quads[3].app[0].destAddresses = "quads[1] quads[2] quads[0] sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] sensors[6] sensors[7] groundStation"

*.quads[0].mobility.startTime = 0s
*.quads[1].mobility.startTime = 5s
*.quads[2].mobility.startTime = 10s
*.quads[3].mobility.startTime = 15s
*.quads[0].mobility.waypointFile = "paths/voo_ar.waypoints"
*.quads[1].mobility.waypointFile = "paths/voo_ar2.waypoints"
*.quads[2].mobility.waypointFile = "paths/voo_ar3.waypoints"
*.quads[3].mobility.waypointFile = "paths/voo_ar4.waypoints"


*.quads[0].numFailures = 0

#*.sensors[0..3].protocol.typename = "DadcaProtocolSensor"
*.sensors[0..7].protocol.typename = "HICASensorProtocol"
*.sensors[*].app[0].destAddresses = "quads[0] quads[1] quads[2] quads[3]"

#*.groundStation.protocol.typename = "DadcaProtocolGround"
*.groundStation.protocol.typename = "HICAGroundProtocol"
*.groundStation.app[0].destAddresses = "quads[0] quads[1] quads[2] quads[3]"



#[Config Sim1drone-MAM]
#extends=MAM
#description="Simulation with one drone with wifi and MAM radios"
#*.numUAVs = 1
#*.quads[0].app[0].destAddresses = "sensors[0] groundStation"
#*.quads[*].app[*].timeoutDuration = 10s
#*.quads[0].mobility.startTime = 0s
#*.quads[0].app[*].startTime = normal(1s, 1s)
#*.quads[0].numFailures = 2
#*.quads[0].failures[0].typename="SimpleConsumptionEnergy"
#*.quads[0].failures[0].batteryCapacity = 500mAh
#*.quads[0].failures[0].batteryRTLThreshold = 450mAh
#*.quads[0].failures[0].batteryConsumption = 1.5A
#*.quads[0].failures[1].typename="RandomFailureGenerator"
#*.quads[0].failures[1].failureChance = 0.2
#
#*.groundStation.app[0].destAddresses = "quads[0]"


## Additional settings
#*.quads[*].failures[0].typename = "RandomFailureGenerator"
#*.quads[*].failures[0].failureStart = 5s
#*.quads[*].failures[0].failureMinimumInterval = 10s
#*.quads[*].failures[0].failureRollTime = 1s
#*.quads[*].failures[0].failureChance = 0.001
#*.quads[*].failures[0].failureDuration = 20s
